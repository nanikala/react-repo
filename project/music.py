# -*- coding: utf-8 -*-
"""Music.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iahya9XdIrS7FDwJY0CgC-yBzGB1_DoV
"""

import os



dirPath=os.getcwd()
os.chdir(dirPath)

import IPython

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import os
import math
import pickle
import random
import operator
import IPython.display as ipd
import librosa
import librosa.display
import matplotlib.pyplot as plt
# %matplotlib inline

# testing
import soundfile
from glob import glob
import librosa.display
from playsound import playsound

audio_dataset_path=os.path.join(dirPath,"genres_original")
# print(audio_dataset_path)
metadata=pd.read_csv(os.path.join(dirPath,"features_30_sec.csv"))

metadata.head()
print(metadata.head())

def features_extractor(file):
  # playsound(file)
  
  audio,sample_rate = librosa.load(file,res_type='kaiser_fast')
  
  mfccs_features=librosa.feature.mfcc(y=audio,sr=sample_rate,n_mfcc=40)
  mfccs_scaled_featrues =np.mean(mfccs_features.T,axis=0)

  return mfccs_scaled_featrues



metadata.drop(labels=552, axis=0)

from tqdm import tqdm

extracted_features=[]
for index_num, row in tqdm(metadata.iterrows()):
  try:
    final_class_labels=row["label"]
    file_name=os.path.join(audio_dataset_path,final_class_labels+"\\"+str(row["filename"]))
    # print(file_name)
    data=features_extractor(file_name)
    extracted_features.append([data,final_class_labels])
  except Exception as e:
    print(f"Error:{e}")
    continue



extracted_features_df=pd.DataFrame(extracted_features,columns=['feature','class'])
extracted_features_df.head()

extracted_features_df['class'].value_counts()

X=np.array(extracted_features_df['feature'].tolist())
y=np.array(extracted_features_df['class'].tolist())

X.shape

from keras.utils.np_utils import to_categorical
from sklearn.preprocessing import LabelEncoder
labelencoder=LabelEncoder()
y=to_categorical(labelencoder.fit_transform(y))

y.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

X_train

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

import tensorflow as tf
print(tf.__version__)

# from tensorflow.keras.models import Sequential
# from tensorflow.keras.layers import Dense,Dropout,Activation,Flatten
from tensorflow import keras
from keras.layers import Dense,Dropout
from keras.models import Sequential, load_model
# from tensorflow.keras.optimizers import Adam
from sklearn import metrics

num_lables=y.shape[1]

y.shape[1]

model=Sequential()
model.add(Dense(1024,input_shape=(40,),activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(512,activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(256,activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(128,activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(64,activation="relu"))
model.add(Dropout(0.3))
model.add(Dense(32,activation="relu"))
model.add(Dropout(0.3))

model.add(Dense(num_lables,activation="softmax"))

model.summary()

from keras.engine.training import optimizer
model.compile(loss='categorical_crossentropy',metrics=['accuracy'],optimizer='adam')

import time 
t=time.localtime()
# Windows doesn't support in file name hence (.) used (:) 
current_time=time.strftime("%H.%M.%S",t)

# from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.python.keras.callbacks import ModelCheckpoint
from datetime import datetime
num_epochs = 100
num_batch_size=32
checkpointer=ModelCheckpoint(filepath=os.path.join('save_models',f'audio_classification_{current_time}.hdf5'),verbose=1,save_best_only=True)
# checkpointer=ModelCheckpoint(filepath='save_models/audio_classification_{current_time}.hdf5',verbose=1,save_best_only=True)
start=datetime.now()
history=model.fit(X_train,y_train,batch_size=num_batch_size,epochs=num_epochs,validation_data=(X_test,y_test),callbacks=[checkpointer],verbose=1)
duration=datetime.now() - start
print("training completed in time : ",duration)

model.evaluate(X_test,y_test,verbose=0)

# pd.DataFrame(history.history).plot(figsize=(12,6))
# plt.show()

np.argmax(model.predict(X_test),axis = -1)

def prediction(filename):
  
  audio,sample_rate = librosa.load(filename,res_type="kaiser_fast")
  mfccs_features = librosa.feature.mfcc(y=audio,sr=sample_rate,n_mfcc=40)
  mfccs_scaled_features = np.mean(mfccs_features.T,axis=0)
  mfcss_scaled_features=mfccs_scaled_features.reshape(1,-1)
  temp=np.array(mfccs_scaled_features)
  temp=temp.reshape(1,-1)
  predicted_label= model.predict(temp)
  predicted_label=predicted_label.flatten()
  np.set_printoptions(suppress = True)
  m=max(predicted_label)
  ind=np.where(predicted_label==m)[0]
  prediction_class=labelencoder.inverse_transform(ind)
  print(prediction_class[0])
  return prediction_class[0]


import pickle 
pickle.dump(model,open(model.pkl))
# prediction ("C://Users//admin//Desktop//project//genres_original//country//country.00010.wav") 

